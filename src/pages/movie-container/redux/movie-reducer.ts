/* eslint-disable no-param-reassign */
/* eslint-disable no-unused-vars */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import fetchMovies from './movie-action'

const initialState = {
    results: [],
    status: 'loading',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchMovieAsync = createAsyncThunk(
    'movie/fetchMovies',
    async () => {
        const response: any = await fetchMovies()
        // The value we return becomes the `fulfilled` action payload
        return response.data
    },
)

export const movieSlice = createSlice({
    name: 'movie',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: builder => {
        builder
            .addCase(fetchMovieAsync.pending, state => {
                state.status = 'loading'
            })
            .addCase(fetchMovieAsync.fulfilled, (state, action) => {
                const { results } = action.payload || []
                state.status = 'idle'
                state.results = results
            })
    },
})

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.movie.value)`
export const selectCount = (state: {
    movies: {
        [x: string]: any
        results: any
    }
}) => state?.movies || { results: [] }

export default movieSlice.reducer
